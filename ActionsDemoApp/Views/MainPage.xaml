<Page x:Class="ActionsDemoApp.Views.MainPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:Behaviors="using:Template10.Behaviors"
      xmlns:Core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:Interactivity="using:Microsoft.Xaml.Interactivity"
      xmlns:controls="using:Template10.Controls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="using:ActionsDemoApp.Views"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:vm="using:ActionsDemoApp.ViewModels" mc:Ignorable="d">

    <Page.DataContext>
        <vm:MainPageViewModel x:Name="ViewModel" />
    </Page.DataContext>

    <RelativePanel Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="AdaptiveVisualStateGroup">
                <VisualState x:Name="VisualStateNarrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NarrowMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for narrow view  -->
                        <Setter Target="stateTextBox.Text" Value="Narrow Visual State" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateNormal">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource NormalMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for normal view  -->
                        <Setter Target="stateTextBox.Text" Value="Normal Visual State" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VisualStateWide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{StaticResource WideMinWidth}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--  TODO: change properties for wide view  -->
                        <Setter Target="stateTextBox.Text" Value="Wide Visual State" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <controls:PageHeader x:Name="pageHeader" RelativePanel.AlignLeftWithPanel="True"
                             RelativePanel.AlignRightWithPanel="True"
                             RelativePanel.AlignTopWithPanel="True" Text="Main Page">

            <!--  OpenFlyoutAction  -->

            <AppBarButton Icon="Find" Label="Search">
                <FlyoutBase.AttachedFlyout>
                    <Flyout>
                        <StackPanel>
                            <TextBlock Text="Awesome Flyout!" />
                        </StackPanel>
                    </Flyout>
                </FlyoutBase.AttachedFlyout>
                <Interactivity:Interaction.Behaviors>
                    <Core:EventTriggerBehavior EventName="Tapped">
                        <Behaviors:OpenFlyoutAction />
                    </Core:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>

                <!--  CloseFlyoutAction  -->

                <!--<Flyout x:Key="FormFlyout">
                    <StackPanel>
                        <TextBox Header="Name" Text="{x:Bind VM.Name, Mode=TwoWay}"/>
                        <Button>
                            <Interactivity:Interaction.Behaviors>
                                <Core:EventTriggerBehavior EventName="Click">
                                    <Behaviors:CloseFlyoutAction/>
                                </Core:EventTriggerBehavior>
                            </Interactivity:Interaction.Behaviors> Submit
                        </Button>
                    </StackPanel>
                </Flyout>-->

            </AppBarButton>

            <!--  secondary commands  -->
            <controls:PageHeader.SecondaryCommands>
                <AppBarButton Click="{x:Bind ViewModel.GotoSettings}" Label="Settings" />
                <AppBarButton Click="{x:Bind ViewModel.GotoPrivacy}" Label="Privacy" />
                <AppBarButton Click="{x:Bind ViewModel.GotoAbout}" Label="About" />
            </controls:PageHeader.SecondaryCommands>

        </controls:PageHeader>

        <controls:Resizer x:Name="parameterResizer" Margin="16,16,16,0"
                          RelativePanel.AlignLeftWithPanel="True"
                          RelativePanel.Below="pageHeader">

            <TextBox MinWidth="150" MinHeight="62"
                     Header="Parameter to pass"
                     Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     TextWrapping="Wrap">
                <Interactivity:Interaction.Behaviors>
                    <Behaviors:KeyBehavior Key="Enter">
                        <Core:CallMethodAction MethodName="GotoDetailsPage" TargetObject="{Binding}" />
                    </Behaviors:KeyBehavior>
                    <Core:EventTriggerBehavior>
                        <Behaviors:FocusAction />
                    </Core:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>
            </TextBox>

        </controls:Resizer>

        <Button x:Name="submitButton"
                Click="{x:Bind ViewModel.GotoDetailsPage}" Content="Submit"
                RelativePanel.AlignBottomWith="parameterResizer"
                RelativePanel.RightOf="parameterResizer" />

        <TextBlock x:Name="stateTextBox" Margin="16,16,0,0"
                   RelativePanel.AlignLeftWith="parameterResizer"
                   RelativePanel.Below="parameterResizer"
                   Text="Current Visual State" />

        <!--  ConditionalAction  -->
        
        <!--<Button>
            <Core:EventTriggerBehavior EventName="Clicked">
                <b:ConditionalAction xmlns:b="using:Template10.Behaviors" 
            LeftValue="{Binding IsLoggedIn}" Operator="IsTrue">
                    <Core:GoToStateAction StateName="LoggedInViewState" />
                </b:ConditionalAction>
            </Core:EventTriggerBehavior>
        </Button> -->

        <!--  MessageDialogAction  -->
        
        <Button Content="Click for a Message" x:Name="messageButton">
            <RelativePanel.AlignLeftWithPanel>true</RelativePanel.AlignLeftWithPanel>
            <RelativePanel.Below>stateTextBox</RelativePanel.Below>
            <Interactivity:Interaction.Behaviors>
                <Core:EventTriggerBehavior EventName="Click">
                    <Behaviors:MessageDialogAction Content="This is the Content" 
                                           Title="A Title"
                                           OkText="Agreed!"/>
                </Core:EventTriggerBehavior>
            </Interactivity:Interaction.Behaviors>
        </Button>

        <!--  TimeoutAction  -->
        
        <Button Content="Testing Timeout" x:Name="timeoutButton">
            <RelativePanel.AlignRightWithPanel>true</RelativePanel.AlignRightWithPanel>
            <RelativePanel.Below>messageButton</RelativePanel.Below>
            <Interactivity:Interaction.Behaviors>
                <Core:EventTriggerBehavior EventName="Click">
                    <Core:CallMethodAction MethodName="ShowBusy" TargetObject="{Binding Mode=OneWay}" />
                    <Behaviors:TimeoutAction Milliseconds="5000">
                        <Core:CallMethodAction MethodName="HideBusy" TargetObject="{Binding Mode=OneWay}" />
                    </Behaviors:TimeoutAction>
                </Core:EventTriggerBehavior>
            </Interactivity:Interaction.Behaviors>
        </Button>

        <!--  FocusAction  -->
        
        <TextBox MinWidth="250" MinHeight="62"
            Header="Parameter to Test Focus"
            Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <RelativePanel.AlignLeftWithPanel>true</RelativePanel.AlignLeftWithPanel>
            <RelativePanel.Below>timeoutButton</RelativePanel.Below>
            <Interactivity:Interaction.Behaviors>
                <Behaviors:KeyBehavior Key="Enter">
                    <Core:CallMethodAction MethodName="GotoDetailsPage" TargetObject="{Binding}" />
                </Behaviors:KeyBehavior>
                <Core:EventTriggerBehavior>
                    <Behaviors:FocusAction />
                </Core:EventTriggerBehavior>
            </Interactivity:Interaction.Behaviors>
        </TextBox>

    </RelativePanel>
</Page>

